from adrf.routers import DefaultRouter
from django.urls import path, include

from .views import ProfileView, UserAuthViewSet

app_name = "api"

router = DefaultRouter()
router.register(r"", UserAuthViewSet, basename="auth")

urlpatterns = [
    path("", include(router.urls)),

    path(
        "profile/", ProfileView.as_view(), name="about_me"
    ),
]


from django.contrib.auth import login, logout, authenticate
from django.shortcuts import redirect, reverse
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView

from asgiref.sync import sync_to_async
from adrf.viewsets import ViewSet
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import status

from .serializers import UserRegisterSerializer, UserLoginSerializer


class UserAuthViewSet(ViewSet):
    """
    Асинхронный ViewSet для регистрации, входа и выхода пользователя.
    """

    @action(detail=False, methods=['post'], url_path='sign-up')
    async def register(self, request):
        serializer = UserRegisterSerializer(data=request.data)
        if not await serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        user = await sync_to_async(serializer.save)()
        await sync_to_async(login)(request, user)
        return Response(
            {'detail': 'Пользователь успешно зарегистрирован и авторизован'},
            status=status.HTTP_201_CREATED
        )

    @action(detail=False, methods=['post'], url_path='sign-in')
    async def login(self, request):
        serializer = UserLoginSerializer(data=request.data)
        if not await serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        user = serializer.validated_data['user']
        await sync_to_async(login)(request, user)
        return Response({'detail': 'Успешный вход'}, status=status.HTTP_200_OK)

    @action(detail=False, methods=['post'], url_path='sign-out')
    async def logout(self, request):
        await sync_to_async(logout)(request)
        return Response({'detail': 'Вы успешно вышли'}, status=status.HTTP_200_OK)

class ProfileView(LoginRequiredMixin, TemplateView):
    template_name = 'frontend/profile.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        profile = getattr(user, 'profile', None)
        context['user'] = user
        context['profile'] = profile
        return context

"""Сериализаторы для действий с профилем пользователя"""

from django.contrib.auth import get_user_model, password_validation, authenticate
from rest_framework.validators import UniqueValidator
from adrf.serializers import ModelSerializer, Serializer
from rest_framework import serializers  # для ValidationError

User = get_user_model()

class UserRegisterSerializer(ModelSerializer):
    """Асинхронный сериализатор регистрации пользователя."""
    password = serializers.CharField(
        write_only=True,
        validators=[password_validation.validate_password],
        style={'input_type': 'password'}
    )
    username = serializers.CharField(
        validators=[UniqueValidator(queryset=User.objects.all())]
    )

    class Meta:
        model = User
        fields = ('username', 'password', 'first_name',)

    async def create(self, validated_data):
        # create_user — синхронный, обернём в sync_to_async при вызове из вьюхи
        user = User.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            first_name=validated_data.get('first_name', '')
        )
        return user


class UserLoginSerializer(Serializer):
    username = serializers.CharField()
    password = serializers.CharField(write_only=True, style={'input_type': 'password'})

    async def validate(self, data):
        username = data.get('username')
        password = data.get('password')

        if not username or not password:
            raise serializers.ValidationError("Необходимо указать имя пользователя и пароль.")

        # authenticate — синхронная, вызов оборачивайте в sync_to_async в вьюхе
        user = authenticate(username=username, password=password)
        if not user:
            raise serializers.ValidationError("Неверное имя пользователя или пароль.")

        data['user'] = user
        return data

